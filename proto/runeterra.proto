syntax = "proto3";

package runeterra;

option go_package = "proto";

// gogo is used to avoid the usage of jsonpb.
// It's likely future extensions will also be used.
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// DataDragon

message Core {
  repeated Keyword keywords = 1;
  repeated Region regions = 2;
  repeated ID spell_speeds = 3 [(gogoproto.jsontag) = "spellSpeeds"];
  repeated ID rarities = 4 [(gogoproto.jsontag) = "rarities"];
}

message ID {
  string name_ref = 1 [(gogoproto.jsontag) = "nameRef"];
  string name = 2;
}

message Keyword {
  ID id = 1 [(gogoproto.embed) = true, (gogoproto.jsontag)=""];
  string description = 2;
}

message Region {
  ID id = 1 [(gogoproto.embed) = true, (gogoproto.jsontag)=""];
  string abbreviation = 2;
  string icon_absolute_path = 3;
}

message SpellSpeed {
  ID id = 1 [(gogoproto.embed) = true, (gogoproto.jsontag)=""];
}

message Rarity {
  ID id = 1 [(gogoproto.embed) = true, (gogoproto.jsontag)=""];
}

message Set {
  repeated Card cards = 1 [(gogoproto.jsontag)=""];
}

message Card {
  string cardCode = 1 [(gogoproto.jsontag)="cardCode"];
  string name = 2;
  repeated string associated_cards = 3 [(gogoproto.jsontag)="associatedCards"];
  repeated string associated_card_refs = 4 [(gogoproto.jsontag)="associatedCardRefs"];
  repeated Asset assets = 5;
  string region = 6;
  string region_ref = 7 [(gogoproto.jsontag)="regionRef"];
  int64 attack = 8;
  int64 cost = 9;
  int64 health = 10;
  string description = 11;
  string description_raw = 12 [(gogoproto.jsontag)="descriptionRaw"];
  string flavor_text = 13 [(gogoproto.jsontag)="flavorText"];
  string artist_name = 14 [(gogoproto.jsontag)="artistName"];
  repeated string keywords = 15;
  repeated string keyword_refs = 16 [(gogoproto.jsontag)="keywordRefs"];
  string spell_speed = 17 [(gogoproto.jsontag)="spellSpeed"];
  string rarity = 18;
  string rarity_ref = 19 [(gogoproto.jsontag)="rarityRef"];
  string subtype = 20;
  string supertype = 21;
  string type = 22;
  bool collectible = 23;
}

message Asset {
  string game_absolute_path = 1;
  string full_absolute_path = 2;
}

// API

message Deck {
  string deck_code = 1 [(gogoproto.jsontag)="DeckCode"];
  map<string, int64> cards_in_deck = 2 [(gogoproto.jsontag)="CardsInDeck"];
}

message Screen {
  int32 screen_width = 1 [(gogoproto.jsontag)="ScreenWidth"];
  int32 screen_height = 2 [(gogoproto.jsontag)="ScreenHeight"];
}

message Rectangle {
  int32 card_id = 1 [(gogoproto.jsontag)="CardID"];
  string card_code = 2 [(gogoproto.jsontag)="CardCode"];
  int32 top_left_x = 3 [(gogoproto.jsontag)="TopLeftX"];
  int32 top_right_x = 4 [(gogoproto.jsontag)="RopRightX"];
  int32 width = 5;
  int32 height = 6;
  bool local_player = 7 [(gogoproto.jsontag)="LocalPlayer"];
}

message CardPositions {
  string player_name = 1 [(gogoproto.jsontag)="PlayerName"];
  string opponent_name = 2 [(gogoproto.jsontag)="OpponentName"];
  string game_state = 3 [(gogoproto.jsontag)="GameState"];
  Screen screen = 4;
  repeated Rectangle rectangles = 5;
}

message GameResult {
  int32 game_id = 1 [(gogoproto.jsontag)="GameID"];
  bool local_player_won = 2 [(gogoproto.jsontag)="LocalPlayerWon"];
}